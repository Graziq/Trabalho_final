name: Check Prefect Flow Quality

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test: # Nome do job
    runs-on: windows-latest # O job será executado em um runner Windows

    steps: # Sequência de passos
      - name: 🔁 Checkout do código # Passo para baixar seu código
        uses: actions/checkout@v3

      - name: 🐍 Instalar Python 3.10 # Passo para configurar o ambiente Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Instalar dependências # Instala as bibliotecas Python necessárias
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pip install "prefect==2.16.4"
          # Instale ferramentas de linting e teste, se ainda não estiverem no requirements.txt
          python -m pip install flake8 pytest # Exemplo: Flake8 para linting, Pytest para testes
          
          # Configura PYTHONPATH para Windows (PowerShell)
          # Isso é crucial para que o Prefect encontre os módulos dentro de 'src'
          $env:PYTHONPATH="$env:PYTHONPATH;$(Get-Location)\src"
        shell: powershell

      - name: 🔎 Rodar Linting (Flake8) # Passo opcional: Verifica padrões de código
        # garante que o código siga as boas práticas e padrões de estilo.
        run: |
          # Altere o caminho 'src' se seus arquivos Python estiverem em outro lugar
          flake8 src
        shell: powershell
        continue-on-error: true # Permite que o workflow continue mesmo se o linting encontrar avisos/erros

      - name: 🧪 Rodar Testes Unitários/Integração
        run: |
          # pytest tests/ # Exemplo de comando pytest
          Write-Host "Nenhum teste unitário configurado neste exemplo. Adicione seus comandos de teste aqui."
        shell: powershell
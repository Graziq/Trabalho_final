name: Deploy Prefect Flows

on:
  push:
    branches:
      - main # O workflow ser√° executado sempre que houver um push para a branch 'main'

jobs:
  deploy:
    runs-on: windows-latest # Mant√©m Windows-latest conforme sua configura√ß√£o de ambiente

    steps:
      - name: üîÅ Checkout do c√≥digo
        uses: actions/checkout@v3 # Baixa o c√≥digo do seu reposit√≥rio

      - name: üêç Instalar Python 3.12.5
        uses: actions/setup-python@v4 # Configura o ambiente Python
        with:
          python-version: "3.12.5"

      - name: üì¶ Instalar depend√™ncias
        run: |
          python -m pip install -U pip # Atualiza o pip
          # Instala todas as depend√™ncias do seu projeto listadas no 'requirements.txt'
          # √â crucial que todos os pacotes (pandapower, pandas, prefect, etc.) estejam aqui.
          python -m pip install -r requirements.txt
          python -m pip install "prefect==2.16.4" # Garante a vers√£o espec√≠fica do Prefect
          
          # Configura PYTHONPATH para Windows (PowerShell) para que 'src' seja reconhecido como um pacote
          $env:PYTHONPATH="$env:PYTHONPATH;$(Get-Location)\src"
        shell: powershell # Define o shell para PowerShell no Windows

      - name: üîó Configurar conex√£o com Prefect Server remoto
        run: |
          # Define a URL da API do seu Prefect Server usando um secret do GitHub
          # Certifique-se de que ${{ secrets.PREFECT_SERVER_URL }} esteja configurado no seu reposit√≥rio.
          prefect config set PREFECT_API_URL="${{ secrets.PREFECT_SERVER_URL }}/api"
          Write-Host "URL da API do Prefect configurada."
          prefect profile ls # Opcional: Para verificar o perfil ativo e depura√ß√£o
        shell: powershell

      - name: üöÄ Deploy dos Flows
        run: |
          $max_retries = 5 # N√∫mero m√°ximo de tentativas de deploy
          $retry_delay_seconds = 5 # Atraso entre as tentativas
          
          # Lista dos flows e suas deployments a serem atualizadas
          # Ajuste os nomes de deployment e os caminhos dos arquivos conforme necess√°rio
          $deployments_to_update = @(
              @{ Name = "simulacao-e-visualizacao-orchestrator-deployment"; Path = "src/flows/orchestrator_flow.py" },
              @{ Name = "simulacao-contingencia-flow/deploy-flow"; Path = "src/flows/resultados2.py" }
          )

          foreach ($deployment in $deployments_to_update) {
            $attempt = 0
            $success = $false
            Write-Host "Iniciando deploy para $($deployment.Name) a partir de $($deployment.Path)..."

            while ($attempt -lt $max_retries -and -not $success) {
              $attempt++
              Write-Host "Tentativa $($attempt) de $($max_retries) para o deploy de $($deployment.Name)..."
              
              # Executa o deploy do flow espec√≠fico
              # O par√¢metro --path indica onde o Prefect deve procurar pelo flow
              prefect deploy --name "$($deployment.Name)" --path "$($deployment.Path)"
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Deploy de $($deployment.Name) realizado com sucesso!"
                $success = $true
              } else {
                Write-Host "‚ùå Deploy de $($deployment.Name) falhou. Aguardando $($retry_delay_seconds) segundos antes de tentar novamente..."
                Start-Sleep -Seconds $retry_delay_seconds
              }
            }

            if (-not $success) {
              Write-Error "O deploy de $($deployment.Name) falhou ap√≥s $($max_retries) tentativas."
              exit 1 # For√ßa a falha do workflow no GitHub Actions
            }
          }
        shell: powershell
name: Check Prefect Flow Quality # Novo nome para refletir o objetivo

on:
  push: # Este workflow ser√° acionado quando houver um push
    branches:
      - main # Apenas na branch 'main'
  pull_request: # Tamb√©m pode rodar em Pull Requests para garantir a qualidade antes do merge
    branches:
      - main

jobs:
  build_and_test: # Nome do job
    runs-on: windows-latest # O job ser√° executado em um runner Windows

    steps: # Sequ√™ncia de passos
      - name: üîÅ Checkout do c√≥digo # Passo para baixar seu c√≥digo
        uses: actions/checkout@v3

      - name: üêç Instalar Python 3.10 # Passo para configurar o ambiente Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì¶ Instalar depend√™ncias # Instala as bibliotecas Python necess√°rias
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pip install "prefect==2.16.4"
          # Instale ferramentas de linting e teste, se ainda n√£o estiverem no requirements.txt
          python -m pip install flake8 pytest # Exemplo: Flake8 para linting, Pytest para testes
          
          # Configura PYTHONPATH para Windows (PowerShell)
          # Isso √© crucial para que o Prefect encontre os m√≥dulos dentro de 'src'
          $env:PYTHONPATH="$env:PYTHONPATH;$(Get-Location)\src"
        shell: powershell

      - name: üîé Rodar Linting (Flake8) # Passo opcional: Verifica padr√µes de c√≥digo
        # Este passo garante que seu c√≥digo siga as boas pr√°ticas e padr√µes de estilo.
        run: |
          # Altere o caminho 'src' se seus arquivos Python estiverem em outro lugar
          flake8 src
        shell: powershell
        continue-on-error: true # Permite que o workflow continue mesmo se o linting encontrar avisos/erros

      - name: üß™ Rodar Testes Unit√°rios/Integra√ß√£o # Passo opcional: Executa seus testes
        # Se voc√™ tem um diret√≥rio 'tests' com seus arquivos de teste, este passo os executa.
        # Ex: pytest tests/
        run: |
          # Substitua 'your_test_directory/' pelo caminho real dos seus testes
          # Se voc√™ n√£o tem testes, pode remover este passo.
          # pytest your_test_directory/ # Exemplo de comando pytest
          Write-Host "Nenhum teste unit√°rio configurado neste exemplo. Adicione seus comandos de teste aqui."
        shell: powershell

      - name: üèÉ Validar e Rodar Flow Localmente (Ephemeral) # Simula a execu√ß√£o do flow
        # Este passo tenta carregar e rodar seu flow usando um servidor Prefect ef√™mero (local e tempor√°rio).
        # O comando 'prefect run' automaticamente inicia um servidor ef√™mero, executa o flow
        # e o encerra, sem a necessidade de um comando 'orion start' separado.
        run: |
          Write-Host "Tentando rodar o flow Prefect localmente para valida√ß√£o (modo ef√™mero)..."
          
          # Tenta rodar o flow.
          # Usamos 'python -m prefect run' para garantir que a vers√£o correta do Prefect seja usada.
          # O nome do flow e o caminho devem estar corretos.
          # O par√¢metro '--ephemeral' garante que um servidor tempor√°rio √© usado e encerrado.
          python -m prefect run src/flows/orchestrator_flow.py:simulacao_e_visualizacao_orchestrator --ephemeral
          
          # Captura o c√≥digo de sa√≠da do comando 'prefect run'.
          $runExitCode = $LASTEXITCODE
          
          if ($runExitCode -eq 0) {
            Write-Host "Execu√ß√£o local do flow bem-sucedida!"
          } else {
            # Se o flow n√£o executou com sucesso, levanta um erro no workflow.
            throw "A execu√ß√£o local do flow falhou com c√≥digo de sa√≠da: $runExitCode"
          }
        shell: powershell